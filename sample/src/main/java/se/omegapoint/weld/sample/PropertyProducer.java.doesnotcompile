package se.omegapoint.weld.sample;

import javax.enterprise.inject.Default;
import javax.enterprise.inject.Produces;
import javax.enterprise.inject.spi.InjectionPoint;
import javax.inject.Inject;
import java.lang.annotation.Annotation;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created with IntelliJ IDEA.
 * User: geospa
 * Date: 16/09/14
 * Time: 21:51
 * To change this template use File | Settings | File Templates.
 */
public class PropertyProducer {
    @Inject
    private Logger log;

    @Produces @Property("")
    public String property(InjectionPoint ip){
        if (log.isLoggable(Level.INFO)) {
            log.log(Level.INFO, "ip:"+ip);
            for(Annotation qual:ip.getQualifiers()){
                if (log.isLoggable(Level.INFO)) {
                    log.log(Level.INFO, "qualifier: "+qual);
                }
            }
        }

        return "sample";
    }

    @Produces @Property("")
    public Integer intProperty(InjectionPoint ip, Properties properties){
        if (log.isLoggable(Level.INFO)) {
            log.log(Level.INFO, "ip:"+ip);
            for(Annotation qual:ip.getQualifiers()){
                if (log.isLoggable(Level.INFO)) {
                    log.log(Level.INFO, "qualifier: "+qual);
                }
            }
        }

        return 1;
    }


    /*
    Properties can come from multiple sources and might need to be merged
    #properties
    System.properties
    classpath:
    classpath*: all occurrences in classpath
    Any registered url.
    ResourceBundle with Some kind of locale flavour

    #xml
    classpath:
    classpath*: all occurrences in classpath
    Any registered url.

     */
    @Produces
    public Properties produceProperties(InjectionPoint ip){
        return new Properties();
    }

}
